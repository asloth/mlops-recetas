services:
  postgres:
    env_file: "./mlflow-server/mlflow.env"
    image: postgres:latest
    container_name: postgres
    restart: always
    ports:
      - "${PG_PORT}:5432"
    expose:
      - "${PG_PORT}"
    networks:
      - backend
    environment:
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - POSTGRES_DB=${PG_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
  minio:
    env_file: "./mlflow-server/mlflow.env"
    restart: always
    image: quay.io/minio/minio
    container_name: minio
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_UI_PORT}:9001" 
    networks:
      - frontend
      - backend
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_ACCESS_KEY}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
  minio-setup:
    env_file: "./mlflow-server/mlflow.env"
    image: quay.io/minio/mc
    networks:
      - backend
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c '
      sleep 5;
      /usr/bin/mc config host add s3 http://minio:${MINIO_PORT} ${MINIO_ACCESS_KEY} ${MINIO_SECRET_ACCESS_KEY} --api S3v4;
      /usr/bin/mc mb --ignore-existing s3/${MLFLOW_BUCKET_NAME};
      /usr/bin/mc anonymous set download s3/${MLFLOW_BUCKET_NAME};
      /usr/bin/mc anonymous set upload s3/${MLFLOW_BUCKET_NAME};
      /usr/bin/mc anonymous set public s3/${MLFLOW_BUCKET_NAME};
      exit 0;
      '
  mlflow:
    env_file: "./mlflow-server/mlflow.env"
    restart: always
    build: ./mlflow-server/
    container_name: mlflow-server
    ports:
      - "${MLFLOW_PORT}:5000"
    networks:
      - frontend
      - backend
      - shared_network
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_ACCESS_KEY}
      - MLFLOW_S3_ENDPOINT_URL=http://minio:${MINIO_PORT}
    command: >
      mlflow server
      --backend-store-uri postgresql://${PG_USER}:${PG_PASSWORD}@postgres:${PG_PORT}/${PG_DB} 
      --host 0.0.0.0
      --port 5000
      --gunicorn-opts="--timeout 320"
      --artifacts-destination s3://${MLFLOW_BUCKET_NAME}/
    depends_on:
      - postgres
      - minio-setup     
volumes:
  postgres_data:
  minio_data:
networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
  shared_network:
    external: true
